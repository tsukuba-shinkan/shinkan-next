// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState, useEffect } from "react";
import OrgCard from "../components/OrgCard";
import Pager from "../components/Pager";
import { PlasmicOrg } from "../components/plasmic/shinkan_next/PlasmicOrg";
import { activityType, organizationType } from "../utils/categoryTable";
import { s3Fetch } from "../utils/s3Fetch";

const PER_PAGE = 10;

function Org() {
  const [orgs, setOrgs] = useState<
    {
      wpsrc: string;
      description: string;
      name: string;
      activity: "sports" | "art" | "culture" | "other";
      orgType: "ippan" | "kagai" | "other";
      orgId: number;
    }[]
  >([]);
  const [page, setPage] = useState(1); // one based index
  useEffect(() => {
    search();
  }, [page]);

  const [keyword, setKeyword] = useState("");
  const search = async () => {
    if (keyword.length === 0) {
      return setOrgs([]);
    }
    /*
    const result = await wpFetch(
      buildPathWithWPQuery("/v2/pages", {
        search: keyword,
        per_page: PER_PAGE.toString(),
        page: page.toString(),
        _fields:
          "id,date,modified,title,title,content,excerpt,author,activitytype,organizationtype,event",
      })
    );
    */

    const result = await s3Fetch("/search/org?q=" + keyword);

    if (result.code === "rest_post_invalid_page_number") {
      return setOrgs([]);
    }
    setOrgs(
      result.map((p: any) => ({
        description: p.excerpt.rendered,
        name: p.title.rendered,
        orgId: p.id as number,
        activity: activityType[p.activitytype[0]]?.name,
        orgType: organizationType[p.organizationtype[0]]?.name,
        wpsrc: p.event.mainImage?.[0],
      }))
    );
  };

  const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) =>
    e.code === "Enter" && search();

  return (
    <PlasmicOrg
      orgs={
        <>
          {orgs.map((o) => (
            <OrgCard {...o} key={o.orgId} />
          ))}
        </>
      }
      searchInput={{
        value: keyword,
        onChange(e) {
          setKeyword(e.target.value);
        },
        onKeyDown,
      }}
      searchButton={{
        onClick() {
          setPage(1);
          search();
        },
      }}
      resultLength={orgs.length.toString()}
      pager={
        <Pager
          hasNext={orgs.length >= PER_PAGE}
          hasPrev={page > 1}
          pageFn={(i) => setPage((p) => p + i)}
        ></Pager>
      }
    />
  );
}

export default Org;

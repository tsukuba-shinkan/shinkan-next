// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import { GetStaticPaths, GetStaticProps } from "next";
import { PlasmicOrgid } from "../../components/plasmic/shinkan_next/PlasmicOrgid";
import EventListItem from "../../components/EventListItem";
import { buildPathWithWPQuery, wpFetch } from "../../utils/wpFetch";
import useSWR from "swr";
import { useWPImage } from "../../hooks/useWPImage";
import Page from "../../components/Page";
import { Plasmic_404 } from "../../components/plasmic/shinkan_next/Plasmic_404";
import SocialLink from "../../components/SocialLink";
import { WPCarousel } from "../../components/WPCarousel";
import { activityType, organizationType } from "../../utils/categoryTable";
import { fallback } from "../../utils/config";
import { orgPageIds } from "../../utils/orgPageIds";

async function pageFetch(page: number): Promise<{ id: number }[]> {
  const result = await wpFetch(
    buildPathWithWPQuery("/v2/pages", {
      status: "publish",
      _fields: "id",
      page: page + "",
      per_page: "100",
    })
  );
  if (result?.code === "rest_post_invalid_page_number") {
    return [];
  }
  return result;
}

export const getStaticPaths: GetStaticPaths = async () => {
  const pages = await Promise.all([pageFetch(1), pageFetch(2), pageFetch(3)]);
  const publicPageIds: string[] = pages
    .reduce((acc, val) => acc.concat(val), [])
    .map((it: any) => it.id.toString());

  const allPageIds = Array.from(new Set([...publicPageIds, ...orgPageIds]));
  const paths = allPageIds.map((id: any) => ({
    params: {
      id,
    },
  }));
  return {
    paths,
    fallback: fallback,
  };
};
const pageUrl = (pageId: string) =>
  buildPathWithWPQuery(`/v2/pages/${pageId}`, {
    _fields:
      "id,date,modified,title,title,content,excerpt,author,activitytype,organizationtype,event",
  });
export const getStaticProps: GetStaticProps = async ({ params }) => {
  const pageId = params?.id! + "";
  const post = await wpFetch(pageUrl(pageId));
  if (post.data?.status == 401) {
    return {
      props: {},
    };
  }

  if (post.event?.mainImage?.[0]) {
    const mainImage = await wpFetch(
      buildPathWithWPQuery(`/v2/media/${post.event.mainImage[0]}`, {
        _fields: "media_details",
      })
    );
    return {
      props: {
        initialPageData: post,
        initialMainImageData: mainImage,
      } as Props,
    };
  }
  return {
    props: {
      initialPostData: post,
    },
  };
};
type Props = {
  initialPageData?: any;
  initialMainImageData?: any;
};
function Orgid({ initialPageData, initialMainImageData }: Props) {
  const router = useRouter();
  if (router.isFallback) {
    console.log("フォールバックにつきフェッチします");
  }
  const pageId = router.query.id + "";
  const { data, error } = useSWR(pageUrl(pageId), wpFetch, {
    initialData: initialPageData,
  });
  if (data?.data?.status === 404) {
    return <Plasmic_404 />;
  }
  if (error) {
    console.error("page error", error);
    return (
      <>
        <Head>
          <title>筑波大学新歓Web</title>
        </Head>
        <Page>
          <>申し訳ございません。エラーが発生しました。</>
        </Page>
      </>
    );
  }
  if (!data?.title) {
    // 下書きの場合、その他の理由でinitialPropsがnullの時、読み込み中の時
    return (
      <>
        <Head>
          <title>筑波大学新歓Web</title>
        </Head>
        <Page>
          <>読み込み中</>
        </Page>
      </>
    );
  }
  const title = data.title.rendered;
  const description = data.excerpt.rendered.replace(/<[^>]*>?/gm, "");
  const url = `/org/${pageId}`;
  const mainImage = useWPImage(
    data.event.mainImage[0],
    "medium",
    initialMainImageData
  );
  const events = (() => {
    const arr = [];
    const len = data.event.title.length;
    for (let i = 0; i < len; i++) {
      arr.push({
        start: data.event.start[i],
        end: data.event.end[i],
        title: data.event.title[i],
        description: data.event.description[i],
      });
    }
    return arr;
  })();
  return (
    <>
      <Head>
        <title>{title || "筑波大学新歓Web"}</title>
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:type" content="blog" />
        <meta property="og:url" content={url} />
        <meta property="og:image" content={mainImage} />
        <meta property="og:site_name" content={title} />
        <meta name="twitter:card" content="summary" />
        <meta name="twitter:site" content="@tsukuba_shinkan" />
        <meta name="twitter:url" content={url} />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
        <meta name="twitter:image" content={mainImage} />
        <link rel="canonical" href={url} />
      </Head>
      <PlasmicOrgid
        orgType={organizationType[data.organizationtype[0]].name as any}
        activity={activityType[data.activitytype[0]].name as any}
        image={
          <WPCarousel
            mainImage={data.event.mainImage[0]}
            otherImages={data.event.otherImages.filter((e: string) => !!e)}
            youtubeLinks={data.event.youtubeLinks}
          ></WPCarousel>
        }
        events={events.map((e: any, i: number) => (
          <EventListItem
            eventTitle={e.title}
            dateTime={`${e.start} - ${e.end}`}
            key={i}
          >
            <div
              dangerouslySetInnerHTML={{
                __html: e.description, // WordPressが無害化してくれると期待しているので危ないことしても許されると思っています。
              }}
              className="wpRendered"
            />
          </EventListItem>
        ))}
        title={title}
        socialLinks={
          <>
            {data.event.url?.[0] && (
              <SocialLink
                label={data.event.url[0]}
                type="url"
                href={data.event.url[0]}
              />
            )}
            {data.event.twitter?.[0] && (
              <SocialLink
                label={"@" + data.event.twitter[0]}
                type="twitter"
                href={"https://twitter.com/" + data.event.twitter[0]}
              />
            )}
            {data.event.instagram?.[0] && (
              <SocialLink
                label={data.event.instagram[0]}
                type="twitter"
                href={"https://www.instagram.com/" + data.event.instagram[0]}
              />
            )}
          </>
        }
      >
        <div
          dangerouslySetInnerHTML={{
            __html: data.content.rendered, // WordPressが無害化してくれると期待しているので危ないことしても許されると思っています。
          }}
          className="wpRendered"
        />
      </PlasmicOrgid>
    </>
  );
}

export default Orgid;

// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import { GetStaticPaths, GetStaticProps } from "next";
import { PlasmicOrgid } from "../../components/plasmic/shinkan_next/PlasmicOrgid";
import EventListItem from "../../components/EventListItem";
import { wpFetch } from "../../utils/wpFetch";
import useSWR from "swr";
import { useWPImage } from "../../hooks/useWPImage";
import Page from "../../components/Page";
export const getStaticPaths: GetStaticPaths = async () => {
  const pages = await wpFetch("/v2/pages");

  const paths = pages.map((it: any) => ({
    params: {
      id: it.id.toString(),
    },
  }));
  return {
    paths,
    fallback: true,
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const pageId = params?.id;
  const post = await wpFetch(`/v2/pages/${pageId}`);

  return {
    props: {
      initialData: post,
    } as Props,
  };
};
type Props = {
  initialData: any;
};
function Orgid({ initialData }: Props) {
  const router = useRouter();
  if (router.isFallback) {
    console.log("フォールバックにつきフェッチします");
  }
  const pageId = router.query.id;
  const { data, error } = useSWR(`/v2/pages/${pageId}`, wpFetch, {
    initialData,
  });
  if (error) {
    console.error("page error", error);
    return (
      <Page>
        <>エラー</>
      </Page>
    );
  }
  if (!data) {
    return (
      <Page>
        <>読み込み中</>
      </Page>
    );
  }
  const title = data.title.rendered;
  const description = data.excerpt.rendered.replace(/<[^>]*>?/gm, "");
  const url = `/org/${pageId}`;
  const mainImage = useWPImage(data.event.mainImage[0], "medium");
  const events = (() => {
    const arr = [];
    const len = data.event.title.length;
    for (let i = 0; i < len; i++) {
      arr.push({
        start: data.event.start[i],
        end: data.event.end[i],
        title: data.event.title[i],
        description: data.event.description[i],
      });
    }
    return arr;
  })();

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:type" content="blog" />
        <meta property="og:url" content={url} />
        <meta property="og:image" content={mainImage} />
        <meta property="og:site_name" content={title} />
        <meta name="twitter:card" content="summary" />
        <meta name="twitter:site" content="@tsukuba_shinkan" />
        <meta name="twitter:url" content={url} />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
        <meta name="twitter:image" content={mainImage} />
        <link rel="canonical" href={url} />
      </Head>
      <PlasmicOrgid
        image={<img src={useWPImage(data.event.mainImage[0], "full")} />}
        events={events.map((e: any) => (
          <EventListItem
            eventTitle={e.title}
            dateTime={`${e.start} - ${e.end}`}
          >
            {e.description}
          </EventListItem>
        ))}
        title={title}
      >
        <div
          dangerouslySetInnerHTML={{
            __html: data.content.rendered, // WordPressが無害化してくれると期待しているので危ないことしても許されると思っています。
          }}
        />
      </PlasmicOrgid>
    </>
  );
}

export default Orgid;

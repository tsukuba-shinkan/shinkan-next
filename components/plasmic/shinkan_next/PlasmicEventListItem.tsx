// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: GMIuDj3rjM
import * as React from "react";

import __PlatformHead from "next/head";
import __PlatformLink, { LinkProps as __PlatformLinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import * as sty from "./PlasmicEventListItem.module.css"; // plasmic-import: GMIuDj3rjM/css

import ExpandMoreBlack24DpsvgIcon from "./icons/PlasmicIcon__ExpandMoreBlack24Dpsvg"; // plasmic-import: nktDh0ThKG/icon
import ExpandLess24PxsvgIcon from "./icons/PlasmicIcon__ExpandLess24Pxsvg"; // plasmic-import: PYIjxKxUq0/icon

export type PlasmicEventListItem__VariantMembers = {
  expand: "expand";
};

export type PlasmicEventListItem__VariantsArgs = {
  expand?: SingleBooleanChoiceArg<"expand">;
};

type VariantPropType = keyof PlasmicEventListItem__VariantsArgs;
export const PlasmicEventListItem__VariantProps = new Array<VariantPropType>(
  "expand"
);

export type PlasmicEventListItem__ArgsType = {
  eventTitle?: React.ReactNode;
  dateTime?: React.ReactNode;
  children?: React.ReactNode;
  orgName?: React.ReactNode;
};

type ArgPropType = keyof PlasmicEventListItem__ArgsType;
export const PlasmicEventListItem__ArgProps = new Array<ArgPropType>(
  "eventTitle",
  "dateTime",
  "children",
  "orgName"
);

export type PlasmicEventListItem__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultEventListItemProps {
  eventTitle?: React.ReactNode;
  dateTime?: React.ReactNode;
  children?: React.ReactNode;
  orgName?: React.ReactNode;
  expand?: SingleBooleanChoiceArg<"expand">;
  className?: string;
}

function PlasmicEventListItem__RenderFunc(props: {
  variants: PlasmicEventListItem__VariantsArgs;
  args: PlasmicEventListItem__ArgsType;
  overrides: PlasmicEventListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__bZxVn)}>
        <div className={classNames(defaultcss.all, sty.box__sTAx8)}>
          <p.PlasmicSlot
            defaultContents={"04/01 13:00"}
            value={args.dateTime}
            className={classNames(sty.slotDateTime)}
          />
        </div>

        <div className={classNames(defaultcss.all, sty.box___9UZt9)}>
          <p.PlasmicSlot
            defaultContents={"橋本環奈を眺める会"}
            value={args.eventTitle}
            className={classNames(sty.slotEventTitle)}
          />
        </div>

        <div className={classNames(defaultcss.all, sty.box__bqpMw)}>
          <p.PlasmicIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            PlasmicIconType={
              hasVariant(variants, "expand", "expand")
                ? ExpandLess24PxsvgIcon
                : ExpandMoreBlack24DpsvgIcon
            }
            className={classNames(defaultcss.all, sty.svg, {
              [sty.svg__expand]: hasVariant(variants, "expand", "expand")
            })}
            role={"img"}
          />
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.box__quGeg)}>
        <p.PlasmicSlot
          defaultContents={""}
          value={args.orgName}
          className={classNames(sty.slotOrgName)}
        />
      </div>

      {(hasVariant(variants, "expand", "expand") ? true : false) ? (
        <div
          className={classNames(defaultcss.all, sty.box__tEnfv, {
            [sty.box__expand__tEnfvVcxC]: hasVariant(
              variants,
              "expand",
              "expand"
            )
          })}
        >
          <div className={classNames(defaultcss.all, sty.box__jLNs)}>
            <p.PlasmicSlot
              defaultContents={"イベントの説明が入る"}
              value={args.children}
              className={classNames(sty.slotChildren)}
            />
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEventListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicEventListItem__VariantsArgs;
  args?: PlasmicEventListItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicEventListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicEventListItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEventListItem__ArgProps,
      internalVariantPropNames: PlasmicEventListItem__VariantProps
    });

    return PlasmicEventListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEventListItem";
  } else {
    func.displayName = `PlasmicEventListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicEventListItem = Object.assign(
  // Top-level PlasmicEventListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicEventListItem
    internalVariantProps: PlasmicEventListItem__VariantProps,
    internalArgProps: PlasmicEventListItem__ArgProps
  }
);

export default PlasmicEventListItem;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: tdmoFHXXat7
import * as React from "react";

import __PlatformHead from "next/head";
import __PlatformLink, { LinkProps as __PlatformLinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLink from "../../HeaderLink"; // plasmic-import: gugJhCOlow/component
import EventListItem from "../../EventListItem"; // plasmic-import: GMIuDj3rjM/component
import CategoryRadio from "../../CategoryRadio"; // plasmic-import: s14nWegQm7/component
import OrgCard from "../../OrgCard"; // plasmic-import: hH2h_5Dtgs/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: rGlYl5prqxJP/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import * as sty from "./PlasmicPage.module.css"; // plasmic-import: tdmoFHXXat7/css

export type PlasmicPage__VariantMembers = {};

export type PlasmicPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicPage__VariantsArgs;
export const PlasmicPage__VariantProps = new Array<VariantPropType>();

export type PlasmicPage__ArgsType = {
  container?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPage__ArgsType;
export const PlasmicPage__ArgProps = new Array<ArgPropType>("container");

export type PlasmicPage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  title?: p.Flex<"a"> & Partial<__PlatformLinkProps>;
  links?: p.Flex<"div">;
  container?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  events?: p.Flex<"div">;
  button?: p.Flex<"div">;
  eventList?: p.Flex<"div">;
  orgs?: p.Flex<"div">;
  announcements?: p.Flex<"div">;
  eventList2?: p.Flex<"div">;
  footer?: p.Flex<"div">;
  columns?: p.Flex<"div">;
};

export interface DefaultPageProps {
  container?: React.ReactNode;
  className?: string;
}

function PlasmicPage__RenderFunc(props: {
  variants: PlasmicPage__VariantsArgs;
  args: PlasmicPage__ArgsType;
  overrides: PlasmicPage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames(defaultcss.all, sty.header)}
      >
        <p.PlasmicLink
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          className={classNames(defaultcss.all, sty.title)}
          component={__PlatformLink}
          href={"/" as const}
          platform={"nextjs"}
        >
          <img
            alt={""}
            className={classNames(defaultcss.img, sty.img__e1Q90)}
            role={"img"}
            src={"/plasmic/shinkan_next/images/microsoftTeamsImagepng.png"}
          />

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__enS97
            )}
          >
            {"筑波大学新歓Web"}
          </div>
        </p.PlasmicLink>

        <div
          data-plasmic-name={"links"}
          data-plasmic-override={overrides.links}
          className={classNames(defaultcss.all, sty.links)}
        >
          <div className={classNames(defaultcss.all, sty.box__lmOKw)}>
            <HeaderLink
              className={classNames("__wab_instance", sty.headerLink___2GQ6)}
              to={"/events" as const}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__wyzrt
                )}
              >
                {"イベントを探す"}
              </div>
            </HeaderLink>
          </div>

          <HeaderLink
            className={classNames("__wab_instance", sty.headerLink__lle4C)}
            to={"/org" as const}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__wyBgt
              )}
            >
              {"団体を探す"}
            </div>
          </HeaderLink>
        </div>
      </div>

      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(defaultcss.all, sty.container)}
      >
        <p.PlasmicSlot
          defaultContents={
            <React.Fragment>
              <div
                data-plasmic-name={"hero"}
                data-plasmic-override={overrides.hero}
                className={classNames(defaultcss.all, sty.hero)}
              >
                <div className={classNames(defaultcss.all, sty.box__ja5VR)} />

                <div className={classNames(defaultcss.all, sty.box__yao8J)} />
              </div>

              <div
                data-plasmic-name={"events"}
                data-plasmic-override={overrides.events}
                className={classNames(defaultcss.all, sty.events)}
              >
                <div className={classNames(defaultcss.all, sty.box__iqMa3)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__wHyBl
                    )}
                  >
                    {"本日のイベント"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__kdnGa
                    )}
                  >
                    {"4"}
                  </div>

                  <div className={classNames(defaultcss.all, sty.box___6MEz)} />

                  <div
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(defaultcss.all, sty.button)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___2K8IC
                      )}
                    >
                      {"イベント検索へ"}
                    </div>
                  </div>
                </div>

                <div
                  data-plasmic-name={"eventList"}
                  data-plasmic-override={overrides.eventList}
                  className={classNames(defaultcss.all, sty.eventList)}
                >
                  <EventListItem
                    className={classNames(
                      "__wab_instance",
                      sty.eventListItem___8B3Jx
                    )}
                    eventTitle={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box___3OYuB
                        )}
                      >
                        {"桜を見る会 @ 反町の森公園"}
                      </div>
                    }
                  />

                  <EventListItem
                    className={classNames(
                      "__wab_instance",
                      sty.eventListItem__toIua
                    )}
                    eventTitle={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box__hrTms
                        )}
                      >
                        {"橋本環奈同好会オンライン説明会"}
                      </div>
                    }
                  />

                  <EventListItem
                    className={classNames(
                      "__wab_instance",
                      sty.eventListItem__mhprB
                    )}
                    eventTitle={"女装同好会"}
                  />

                  <EventListItem
                    className={classNames(
                      "__wab_instance",
                      sty.eventListItem__ecWZ
                    )}
                  />
                </div>
              </div>

              <div
                data-plasmic-name={"orgs"}
                data-plasmic-override={overrides.orgs}
                className={classNames(defaultcss.all, sty.orgs)}
              >
                <div className={classNames(defaultcss.all, sty.box__iqguu)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__zZcjy
                    )}
                  >
                    {"団体一覧"}
                  </div>

                  <div className={classNames(defaultcss.all, sty.box___5N1NQ)}>
                    <CategoryRadio
                      className={classNames(
                        "__wab_instance",
                        sty.categoryRadio__pnm9T
                      )}
                    />

                    <CategoryRadio
                      className={classNames(
                        "__wab_instance",
                        sty.categoryRadio__hnnyJ
                      )}
                    />

                    <CategoryRadio
                      className={classNames(
                        "__wab_instance",
                        sty.categoryRadio___1Mosy
                      )}
                    />
                  </div>
                </div>

                <div className={classNames(defaultcss.all, sty.box__u8Hdl)}>
                  <OrgCard
                    category={"体育系・一般学生団体"}
                    className={classNames("__wab_instance", sty.orgCard__aeuCu)}
                    name={"橋本環奈同好会"}
                  />

                  <OrgCard
                    category={"体育系・一般学生団体"}
                    className={classNames("__wab_instance", sty.orgCard__ln17U)}
                    description={"アクセスするたび変わります"}
                    name={"女装同好会"}
                  />

                  <OrgCard
                    category={"体育系・一般学生団体"}
                    className={classNames("__wab_instance", sty.orgCard__iCOr)}
                    description={"ランダムに変わります"}
                    name={"橋本環奈同好会"}
                  />

                  <OrgCard
                    category={"体育系・一般学生団体"}
                    className={classNames("__wab_instance", sty.orgCard__fHleE)}
                    description={
                      "ランダムに選ぶ機能はWordPressの機能を使いたいところですが"
                    }
                    name={"橋本環奈同好会"}
                  />

                  <OrgCard
                    category={"体育系・一般学生団体"}
                    className={classNames("__wab_instance", sty.orgCard__riReg)}
                    description={
                      "おそらくフロントエンドでシャッフルしないといけない"
                    }
                    name={"橋本環奈同好会"}
                  />

                  <OrgCard
                    category={"体育系・一般学生団体"}
                    className={classNames("__wab_instance", sty.orgCard__t38N)}
                    name={"橋本環奈同好会"}
                  />

                  <OrgCard
                    category={"体育系・一般学生団体"}
                    className={classNames("__wab_instance", sty.orgCard__gljhw)}
                    name={"橋本環奈同好会"}
                  />

                  <OrgCard
                    className={classNames("__wab_instance", sty.orgCard__sGmGo)}
                  />
                </div>

                <div className={classNames(defaultcss.all, sty.box__nc1X6)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__uPpXn
                    )}
                  >
                    {"もっと見る"}
                  </div>
                </div>
              </div>

              <div
                data-plasmic-name={"announcements"}
                data-plasmic-override={overrides.announcements}
                className={classNames(defaultcss.all, sty.announcements)}
              >
                <div className={classNames(defaultcss.all, sty.box__m5T)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__do6W3
                    )}
                  >
                    {"お知らせ"}
                  </div>
                </div>

                <div
                  data-plasmic-name={"eventList2"}
                  data-plasmic-override={overrides.eventList2}
                  className={classNames(defaultcss.all, sty.eventList2)}
                >
                  <EventListItem
                    className={classNames(
                      "__wab_instance",
                      sty.eventListItem__sHhVr
                    )}
                    eventTitle={"2021/4/1 サイトを公開しました"}
                  />
                </div>
              </div>
            </React.Fragment>
          }
          value={args.container}
        />
      </div>

      <div
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames(defaultcss.all, sty.footer)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(defaultcss.all, sty.columns)}
        >
          <div className={classNames(defaultcss.all, sty.column__swH9F)}>
            <div className={classNames(defaultcss.all, sty.box__uj51S)}>
              <p.PlasmicLink
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.link__oM7U
                )}
                component={__PlatformLink}
                href={"/about" as const}
                platform={"nextjs"}
              >
                {"このサイトについて"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.link__ur8FT
                )}
                component={__PlatformLink}
                href={"/" as const}
                platform={"nextjs"}
              >
                {"新歓祭について"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.link___8Ay0F
                )}
                component={__PlatformLink}
                href={"/" as const}
                platform={"nextjs"}
              >
                {"団体用システムログイン"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.link__xFwV
                )}
                component={__PlatformLink}
                href={
                  "http://www.stb.tsukuba.ac.jp/~bunsa/wiki/doku.php" as const
                }
                platform={"nextjs"}
              >
                {"文化系サークル連合会"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.link__ilNgt
                )}
                component={__PlatformLink}
                href={"http://www.stb.tsukuba.ac.jp/~geisa/" as const}
                platform={"nextjs"}
              >
                {"芸術系サークル連合会"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.link__qr0Va
                )}
                component={__PlatformLink}
                href={"https://www.stb.tsukuba.ac.jp/~taiikukai/" as const}
                platform={"nextjs"}
              >
                {"体育会"}
              </p.PlasmicLink>
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.column__yXJr8)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__l1A9M
              )}
            >
              {"©\u00012021\u0001筑波大学新歓Webプロジェクトチーム"}
            </div>

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__jxcc1)}
              role={"img"}
              src={"/plasmic/shinkan_next/images/schoollogopng.png"}
            />
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "title",
    "links",
    "container",
    "hero",
    "events",
    "button",
    "eventList",
    "orgs",
    "announcements",
    "eventList2",
    "footer",
    "columns"
  ],
  header: ["header", "title", "links"],
  title: ["title"],
  links: ["links"],
  container: [
    "container",
    "hero",
    "events",
    "button",
    "eventList",
    "orgs",
    "announcements",
    "eventList2"
  ],
  hero: ["hero"],
  events: ["events", "button", "eventList"],
  button: ["button"],
  eventList: ["eventList"],
  orgs: ["orgs"],
  announcements: ["announcements", "eventList2"],
  eventList2: ["eventList2"],
  footer: ["footer", "columns"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  title: "a";
  links: "div";
  container: "div";
  hero: "div";
  events: "div";
  button: "div";
  eventList: "div";
  orgs: "div";
  announcements: "div";
  eventList2: "div";
  footer: "div";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPage__VariantsArgs;
  args?: PlasmicPage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPage__ArgProps,
      internalVariantPropNames: PlasmicPage__VariantProps
    });

    return PlasmicPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPage";
  } else {
    func.displayName = `PlasmicPage.${nodeName}`;
  }
  return func;
}

export const PlasmicPage = Object.assign(
  // Top-level PlasmicPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    title: makeNodeComponent("title"),
    links: makeNodeComponent("links"),
    container: makeNodeComponent("container"),
    hero: makeNodeComponent("hero"),
    events: makeNodeComponent("events"),
    button: makeNodeComponent("button"),
    eventList: makeNodeComponent("eventList"),
    orgs: makeNodeComponent("orgs"),
    announcements: makeNodeComponent("announcements"),
    eventList2: makeNodeComponent("eventList2"),
    footer: makeNodeComponent("footer"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicPage
    internalVariantProps: PlasmicPage__VariantProps,
    internalArgProps: PlasmicPage__ArgProps
  }
);

export default PlasmicPage;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: 8FZzPTX83m
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import * as sty from "./PlasmicSocialLink.module.css"; // plasmic-import: 8FZzPTX83m/css

export type PlasmicSocialLink__VariantMembers = {
  type: "url" | "twitter" | "instagram";
};

export type PlasmicSocialLink__VariantsArgs = {
  type?: SingleChoiceArg<"url" | "twitter" | "instagram">;
};

type VariantPropType = keyof PlasmicSocialLink__VariantsArgs;
export const PlasmicSocialLink__VariantProps = new Array<VariantPropType>(
  "type"
);

export type PlasmicSocialLink__ArgsType = {
  href?: string | PageHref;
  label?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSocialLink__ArgsType;
export const PlasmicSocialLink__ArgProps = new Array<ArgPropType>(
  "href",
  "label"
);

export type PlasmicSocialLink__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<"img">;
};

export interface DefaultSocialLinkProps {
  href?: string | PageHref;
  label?: React.ReactNode;
  type?: SingleChoiceArg<"url" | "twitter" | "instagram">;
  className?: string;
}

function PlasmicSocialLink__RenderFunc(props: {
  variants: PlasmicSocialLink__VariantsArgs;
  args: PlasmicSocialLink__ArgsType;
  overrides: PlasmicSocialLink__OverridesType;
  dataFetches?: PlasmicSocialLink__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, sty.link, {
          [sty.link__type_twitter]: hasVariant(variants, "type", "twitter")
        })}
        component={Link}
        href={args.href}
        platform={"nextjs"}
      >
        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img, {
            [sty.img__type_instagram]: hasVariant(
              variants,
              "type",
              "instagram"
            ),
            [sty.img__type_twitter]: hasVariant(variants, "type", "twitter"),
            [sty.img__type_url]: hasVariant(variants, "type", "url")
          })}
          role={"img"}
          src={
            hasVariant(variants, "type", "instagram")
              ? "/plasmic/shinkan_next/images/image4.png"
              : hasVariant(variants, "type", "twitter")
              ? "/plasmic/shinkan_next/images/image3.png"
              : hasVariant(variants, "type", "url")
              ? "/plasmic/shinkan_next/images/link24Pxsvg2.svg"
              : undefined
          }
        />

        {p.renderPlasmicSlot({
          defaultContents: "https://example.com",
          value: args.label,
          className: classNames(sty.slotLabel, {
            [sty.slotLabel__type_instagram]: hasVariant(
              variants,
              "type",
              "instagram"
            ),
            [sty.slotLabel__type_twitter]: hasVariant(
              variants,
              "type",
              "twitter"
            ),
            [sty.slotLabel__type_url]: hasVariant(variants, "type", "url")
          })
        })}
      </p.PlasmicLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "img"],
  link: ["link", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialLink__VariantsArgs;
    args?: PlasmicSocialLink__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSocialLink__Fetches;
  } & Omit<PlasmicSocialLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSocialLink__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSocialLink__ArgProps,
      internalVariantPropNames: PlasmicSocialLink__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSocialLink__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialLink";
  } else {
    func.displayName = `PlasmicSocialLink.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialLink = Object.assign(
  // Top-level PlasmicSocialLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicSocialLink
    internalVariantProps: PlasmicSocialLink__VariantProps,
    internalArgProps: PlasmicSocialLink__ArgProps
  }
);

export default PlasmicSocialLink;
/* prettier-ignore-end */

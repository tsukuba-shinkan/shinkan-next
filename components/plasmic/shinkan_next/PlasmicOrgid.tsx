// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: BVU0MRRo9W
import * as React from "react";

import __PlatformHead from "next/head";
import __PlatformLink, { LinkProps as __PlatformLinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Page from "../../Page"; // plasmic-import: tdmoFHXXat7/component
import EventListItem from "../../EventListItem"; // plasmic-import: GMIuDj3rjM/component
import SocialLink from "../../SocialLink"; // plasmic-import: 8FZzPTX83m/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: rGlYl5prqxJP/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import * as sty from "./PlasmicOrgid.module.css"; // plasmic-import: BVU0MRRo9W/css

export type PlasmicOrgid__VariantMembers = {};

export type PlasmicOrgid__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrgid__VariantsArgs;
export const PlasmicOrgid__VariantProps = new Array<VariantPropType>();

export type PlasmicOrgid__ArgsType = {
  id?: string;
  title?: React.ReactNode;
  events?: React.ReactNode;
  children?: React.ReactNode;
  image?: React.ReactNode;
  socialLinks?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOrgid__ArgsType;
export const PlasmicOrgid__ArgProps = new Array<ArgPropType>(
  "id",
  "title",
  "events",
  "children",
  "image",
  "socialLinks"
);

export type PlasmicOrgid__OverridesType = {
  root?: p.Flex<"div">;
  page?: p.Flex<typeof Page>;
  columns?: p.Flex<"div">;
  img?: p.Flex<"img">;
  eventList?: p.Flex<"div">;
};

export interface DefaultOrgidProps {
  id?: string;
  title?: React.ReactNode;
  events?: React.ReactNode;
  children?: React.ReactNode;
  image?: React.ReactNode;
  socialLinks?: React.ReactNode;
  className?: string;
}

function PlasmicOrgid__RenderFunc(props: {
  variants: PlasmicOrgid__VariantsArgs;
  args: PlasmicOrgid__ArgsType;
  overrides: PlasmicOrgid__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <__PlatformHead>
        <title key="title">{""}</title>
      </__PlatformHead>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Page
            data-plasmic-name={"page"}
            data-plasmic-override={overrides.page}
            className={classNames("__wab_instance", sty.page)}
          >
            <div className={classNames(defaultcss.all, sty.box__cnIo)}>
              <p.PlasmicSlot
                defaultContents={"団体の名前が入る"}
                value={args.title}
                className={classNames(sty.slotTitle)}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns)}
              >
                <div className={classNames(defaultcss.all, sty.column__f8AlD)}>
                  <p.PlasmicSlot
                    defaultContents={
                      <img
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(defaultcss.img, sty.img)}
                        loading={"lazy" as const}
                        role={"img"}
                        src={"/plasmic/shinkan_next/images/image2.png"}
                      />
                    }
                    value={args.image}
                  />

                  <div
                    data-plasmic-name={"eventList"}
                    data-plasmic-override={overrides.eventList}
                    className={classNames(defaultcss.all, sty.eventList)}
                  >
                    <p.PlasmicSlot
                      defaultContents={
                        <React.Fragment>
                          <EventListItem
                            className={classNames(
                              "__wab_instance",
                              sty.eventListItem__gqe6M
                            )}
                          />

                          <EventListItem
                            className={classNames(
                              "__wab_instance",
                              sty.eventListItem__yd4Fs
                            )}
                          />

                          <EventListItem
                            className={classNames(
                              "__wab_instance",
                              sty.eventListItem__sqUwZ
                            )}
                            eventTitle={
                              <div
                                className={classNames(
                                  defaultcss.all,
                                  defaultcss.__wab_text,
                                  sty.box__xOko3
                                )}
                              >
                                {"橋本環奈を眺める会"}
                              </div>
                            }
                          />
                        </React.Fragment>
                      }
                      value={args.events}
                    />
                  </div>

                  <div className={classNames(defaultcss.all, sty.box__m5Af8)}>
                    <p.PlasmicSlot
                      defaultContents={
                        <React.Fragment>
                          <SocialLink
                            className={classNames(
                              "__wab_instance",
                              sty.socialLink__ko4Gq
                            )}
                            type={"url" as const}
                          />

                          <SocialLink
                            className={classNames(
                              "__wab_instance",
                              sty.socialLink__js84E
                            )}
                            label={"@tsukuba_shinkan"}
                            type={"twitter" as const}
                          />

                          <SocialLink
                            className={classNames(
                              "__wab_instance",
                              sty.socialLink__cpOrQ
                            )}
                            label={"instagram_account"}
                            type={"instagram" as const}
                          />
                        </React.Fragment>
                      }
                      value={args.socialLinks}
                    />
                  </div>
                </div>

                <div className={classNames(defaultcss.all, sty.column__geaVn)}>
                  <div className={classNames(defaultcss.all, sty.box__vZu7)}>
                    <div className={classNames(defaultcss.all, sty.box__u6L2B)}>
                      <p.PlasmicSlot
                        defaultContents={
                          "ルイズ！ルイズ！ルイズ！ルイズぅぅうううわぁああああああああああああああああああああああん！！！\nあぁああああ…ああ…あっあっー！あぁああああああ！！！ルイズルイズルイズぅううぁわぁああああ！！！\nあぁクンカクンカ！クンカクンカ！スーハースーハー！スーハースーハー！いい匂いだなぁ…くんくん\nんはぁっ！ルイズ・フランソワーズたんの桃色ブロンドの髪をクンカクンカしたいお！クンカクンカ！あぁあ！！\n間違えた！モフモフしたいお！モフモフ！モフモフ！髪髪モフモフ！カリカリモフモフ…きゅんきゅんきゅい！！\n小説12巻のルイズたんかわいかったよぅ！！あぁぁああ…あああ…あっあぁああああ！！ふぁぁあああんんっ！！\nアニメ2期放送されて良かったねルイズたん！あぁあああああ！かわいい！ルイズたん！かわいい！あっああぁああ！\nコミック2巻も発売されて嬉し…いやぁああああああ！！！にゃああああああああん！！ぎゃああああああああ！！\nぐあああああああああああ！！！コミックなんて現実じゃない！！！！あ…小説もアニメもよく考えたら…\nル イ ズ ち ゃ ん は 現実 じ ゃ な い？にゃあああああああああああああん！！うぁああああああああああ！！\nそんなぁああああああ！！いやぁぁぁあああああああああ！！はぁああああああん！！ハルケギニアぁああああ！！\nこの！ちきしょー！やめてやる！！現実なんかやめ…て…え！？見…てる？表紙絵のルイズちゃんが僕を見てる？\n表紙絵のルイズちゃんが僕を見てるぞ！ルイズちゃんが僕を見てるぞ！挿絵のルイズちゃんが僕を見てるぞ！！\nアニメのルイズちゃんが僕に話しかけてるぞ！！！よかった…世の中まだまだ捨てたモンじゃないんだねっ！\nいやっほぉおおおおおおお！！！僕にはルイズちゃんがいる！！やったよケティ！！ひとりでできるもん！！！\nあ、コミックのルイズちゃああああああああああああああん！！いやぁあああああああああああああああ！！！！\nあっあんああっああんあアン様ぁあ！！シ、シエスター！！アンリエッタぁああああああ！！！タバサｧぁあああ！！\nううっうぅうう！！俺の想いよルイズへ届け！！ハルケギニアのルイズへ届け！"
                        }
                        value={args.children}
                      />
                    </div>
                  </div>
                </div>
              </p.Stack>
            </div>
          </Page>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "page", "columns", "img", "eventList"],
  page: ["page", "columns", "img", "eventList"],
  columns: ["columns", "img", "eventList"],
  img: ["img"],
  eventList: ["eventList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  page: typeof Page;
  columns: "div";
  img: "img";
  eventList: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrgid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicOrgid__VariantsArgs;
  args?: PlasmicOrgid__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicOrgid__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicOrgid__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOrgid__ArgProps,
      internalVariantPropNames: PlasmicOrgid__VariantProps
    });

    return PlasmicOrgid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOrgid";
  } else {
    func.displayName = `PlasmicOrgid.${nodeName}`;
  }
  return func;
}

export const PlasmicOrgid = Object.assign(
  // Top-level PlasmicOrgid renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    page: makeNodeComponent("page"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    eventList: makeNodeComponent("eventList"),

    // Metadata about props expected for PlasmicOrgid
    internalVariantProps: PlasmicOrgid__VariantProps,
    internalArgProps: PlasmicOrgid__ArgProps
  }
);

export default PlasmicOrgid;
/* prettier-ignore-end */

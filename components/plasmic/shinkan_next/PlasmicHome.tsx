// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: eUF7R_7Fga
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Page from "../../Page"; // plasmic-import: tdmoFHXXat7/component
import OnlyOpencampus from "../../OnlyOpencampus"; // plasmic-import: x1nR8p_T71/component
import EventListItem from "../../EventListItem"; // plasmic-import: GMIuDj3rjM/component
import CategoryRadio from "../../CategoryRadio"; // plasmic-import: s14nWegQm7/component
import OrgList from "../../OrgList"; // plasmic-import: LzatSZ7oBYe/component
import OrgCard from "../../OrgCard"; // plasmic-import: hH2h_5Dtgs/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import * as sty from "./PlasmicHome.module.css"; // plasmic-import: eUF7R_7Fga/css

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {
  orgs?: React.ReactNode;
  categoryRadio?: React.ReactNode;
  eventList?: React.ReactNode;
  news?: React.ReactNode;
  eventCount?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>(
  "orgs",
  "categoryRadio",
  "eventList",
  "news",
  "eventCount"
);

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  page?: p.Flex<typeof Page>;
  hero?: p.Flex<"div">;
  onlyOpencampus?: p.Flex<typeof OnlyOpencampus>;
  description?: p.Flex<"div">;
  events?: p.Flex<"div">;
  button?: p.Flex<"div">;
  eventList?: p.Flex<"div">;
  orgsContainer?: p.Flex<"div">;
  orgList?: p.Flex<typeof OrgList>;
  announcements?: p.Flex<"div">;
  eventList2?: p.Flex<"div">;
};

export interface DefaultHomeProps {
  dataFetches: PlasmicHome__Fetches;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  dataFetches?: PlasmicHome__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Page
            data-plasmic-name={"page"}
            data-plasmic-override={overrides.page}
            className={classNames("__wab_instance", sty.page)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(defaultcss.all, sty.hero)}
            >
              <div className={classNames(defaultcss.all, sty.box__ig9Yl)} />

              <div className={classNames(defaultcss.all, sty.box__ykPs0)} />
            </div>

            <OnlyOpencampus
              data-plasmic-name={"onlyOpencampus"}
              data-plasmic-override={overrides.onlyOpencampus}
              className={classNames("__wab_instance", sty.onlyOpencampus)}
            >
              {true ? (
                <div
                  data-plasmic-name={"description"}
                  data-plasmic-override={overrides.description}
                  className={classNames(defaultcss.all, sty.description)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__jdzaq
                    )}
                  >
                    {"ようこそ筑波大学へ"}
                  </div>
                </div>
              ) : null}
            </OnlyOpencampus>

            <div
              data-plasmic-name={"events"}
              data-plasmic-override={overrides.events}
              className={classNames(defaultcss.all, sty.events)}
            >
              <div className={classNames(defaultcss.all, sty.box__p08Hk)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__vzmTl
                  )}
                >
                  {"本日のイベント"}
                </div>

                <div className={classNames(defaultcss.all, sty.box__lxuSy)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "4",
                    value: args.eventCount,
                    className: classNames(sty.slotEventCount)
                  })}
                </div>

                <div className={classNames(defaultcss.all, sty.box__kKcvo)} />

                <div
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(defaultcss.all, sty.button)}
                >
                  <p.PlasmicLink
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.link__mV3YJ
                    )}
                    component={Link}
                    href={"/events" as const}
                    platform={"nextjs"}
                  >
                    {"イベント検索へ"}
                  </p.PlasmicLink>
                </div>
              </div>

              <div
                data-plasmic-name={"eventList"}
                data-plasmic-override={overrides.eventList}
                className={classNames(defaultcss.all, sty.eventList)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <EventListItem
                        className={classNames(
                          "__wab_instance",
                          sty.eventListItem__hoLhM
                        )}
                        eventTitle={
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.box___1Nq1
                            )}
                          >
                            {"桜を見る会 @ 反町の森公園"}
                          </div>
                        }
                      />

                      <EventListItem
                        className={classNames(
                          "__wab_instance",
                          sty.eventListItem__av7V1
                        )}
                        eventTitle={
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.box__vcY8
                            )}
                          >
                            {"橋本環奈同好会オンライン説明会"}
                          </div>
                        }
                      />

                      <EventListItem
                        className={classNames(
                          "__wab_instance",
                          sty.eventListItem__bTwts
                        )}
                        eventTitle={"女装同好会"}
                      />

                      <EventListItem
                        className={classNames(
                          "__wab_instance",
                          sty.eventListItem__svl9R
                        )}
                      />
                    </React.Fragment>
                  ),
                  value: args.eventList
                })}
              </div>
            </div>

            <div
              data-plasmic-name={"orgsContainer"}
              data-plasmic-override={overrides.orgsContainer}
              className={classNames(defaultcss.all, sty.orgsContainer)}
            >
              <div className={classNames(defaultcss.all, sty.box__gJi0C)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box___7SGb5
                  )}
                >
                  {"おすすめの団体"}
                </div>

                <div className={classNames(defaultcss.all, sty.box__bkJeC)}>
                  <div className={classNames(defaultcss.all, sty.box___4Coe3)}>
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <React.Fragment>
                          <CategoryRadio
                            className={classNames(
                              "__wab_instance",
                              sty.categoryRadio__l6S0E
                            )}
                          />

                          <CategoryRadio
                            className={classNames(
                              "__wab_instance",
                              sty.categoryRadio__soEt
                            )}
                          />

                          <CategoryRadio
                            className={classNames(
                              "__wab_instance",
                              sty.categoryRadio__bFw1X
                            )}
                          />

                          <CategoryRadio
                            className={classNames(
                              "__wab_instance",
                              sty.categoryRadio__fWiFb
                            )}
                          />

                          <CategoryRadio
                            className={classNames(
                              "__wab_instance",
                              sty.categoryRadio__wqPyK
                            )}
                          />

                          <CategoryRadio
                            className={classNames(
                              "__wab_instance",
                              sty.categoryRadio__rEtQa
                            )}
                          />

                          <CategoryRadio
                            className={classNames(
                              "__wab_instance",
                              sty.categoryRadio___2VI6B
                            )}
                          />
                        </React.Fragment>
                      ),
                      value: args.categoryRadio
                    })}
                  </div>
                </div>
              </div>

              <OrgList
                data-plasmic-name={"orgList"}
                data-plasmic-override={overrides.orgList}
                className={classNames("__wab_instance", sty.orgList)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <OrgCard
                        className={classNames(
                          "__wab_instance",
                          sty.orgCard__tFQfL
                        )}
                        list={"list" as const}
                        name={"橋本環奈同好会"}
                      />

                      <OrgCard
                        className={classNames(
                          "__wab_instance",
                          sty.orgCard__kHx23
                        )}
                        description={"アクセスするたび変わります"}
                        list={"list" as const}
                        name={"女装同好会"}
                      />

                      <OrgCard
                        className={classNames(
                          "__wab_instance",
                          sty.orgCard__gSKea
                        )}
                        description={"ランダムに変わります"}
                        list={"list" as const}
                        name={"橋本環奈同好会"}
                      />

                      <OrgCard
                        className={classNames(
                          "__wab_instance",
                          sty.orgCard__dw2EO
                        )}
                        description={
                          "ランダムに選ぶ機能はWordPressの機能を使いたいところですが"
                        }
                        list={"list" as const}
                        name={"橋本環奈同好会"}
                      />

                      <OrgCard
                        className={classNames(
                          "__wab_instance",
                          sty.orgCard__nyZ9J
                        )}
                        description={
                          "おそらくフロントエンドでシャッフルしないといけない"
                        }
                        list={"list" as const}
                        name={"橋本環奈同好会"}
                      />

                      <OrgCard
                        className={classNames(
                          "__wab_instance",
                          sty.orgCard__k2DJn
                        )}
                        description={
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.box___6Dhj
                            )}
                          >
                            {
                              "長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れ長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみようてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう長い文字を入れてみよう"
                            }
                          </div>
                        }
                        list={"list" as const}
                        name={"橋本環奈同好会"}
                      />

                      <OrgCard
                        className={classNames(
                          "__wab_instance",
                          sty.orgCard___7IDo0
                        )}
                        list={"list" as const}
                        name={"橋本環奈同好会"}
                      />

                      <OrgCard
                        className={classNames(
                          "__wab_instance",
                          sty.orgCard__jXEn
                        )}
                        list={"list" as const}
                      />
                    </React.Fragment>
                  ),
                  value: args.orgs
                })}
              </OrgList>

              <div className={classNames(defaultcss.all, sty.box__c6Wud)}>
                <p.PlasmicLink
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.link__xXnx
                  )}
                  component={Link}
                  href={"/org" as const}
                  platform={"nextjs"}
                >
                  {"団体を検索する"}
                </p.PlasmicLink>
              </div>
            </div>

            <div
              data-plasmic-name={"announcements"}
              data-plasmic-override={overrides.announcements}
              className={classNames(defaultcss.all, sty.announcements)}
            >
              <div className={classNames(defaultcss.all, sty.box__gLaDz)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__ruukh
                  )}
                >
                  {"お知らせ"}
                </div>
              </div>

              <div
                data-plasmic-name={"eventList2"}
                data-plasmic-override={overrides.eventList2}
                className={classNames(defaultcss.all, sty.eventList2)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <EventListItem
                      className={classNames(
                        "__wab_instance",
                        sty.eventListItem__npZl
                      )}
                      eventTitle={"a"}
                    />
                  ),

                  value: args.news
                })}
              </div>
            </div>
          </Page>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "page",
    "hero",
    "onlyOpencampus",
    "description",
    "events",
    "button",
    "eventList",
    "orgsContainer",
    "orgList",
    "announcements",
    "eventList2"
  ],
  page: [
    "page",
    "hero",
    "onlyOpencampus",
    "description",
    "events",
    "button",
    "eventList",
    "orgsContainer",
    "orgList",
    "announcements",
    "eventList2"
  ],
  hero: ["hero"],
  onlyOpencampus: ["onlyOpencampus", "description"],
  description: ["description"],
  events: ["events", "button", "eventList"],
  button: ["button"],
  eventList: ["eventList"],
  orgsContainer: ["orgsContainer", "orgList"],
  orgList: ["orgList"],
  announcements: ["announcements", "eventList2"],
  eventList2: ["eventList2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  page: typeof Page;
  hero: "div";
  onlyOpencampus: typeof OnlyOpencampus;
  description: "div";
  events: "div";
  button: "div";
  eventList: "div";
  orgsContainer: "div";
  orgList: typeof OrgList;
  announcements: "div";
  eventList2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHome__Fetches;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    page: makeNodeComponent("page"),
    hero: makeNodeComponent("hero"),
    onlyOpencampus: makeNodeComponent("onlyOpencampus"),
    description: makeNodeComponent("description"),
    events: makeNodeComponent("events"),
    button: makeNodeComponent("button"),
    eventList: makeNodeComponent("eventList"),
    orgsContainer: makeNodeComponent("orgsContainer"),
    orgList: makeNodeComponent("orgList"),
    announcements: makeNodeComponent("announcements"),
    eventList2: makeNodeComponent("eventList2"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */

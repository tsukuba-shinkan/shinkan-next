// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: oqvYWNjt53
import * as React from "react";

import __PlatformHead from "next/head";
import __PlatformLink, { LinkProps as __PlatformLinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Page from "../../Page"; // plasmic-import: tdmoFHXXat7/component
import OrgCard from "../../OrgCard"; // plasmic-import: hH2h_5Dtgs/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import * as sty from "./PlasmicOrgs.module.css"; // plasmic-import: oqvYWNjt53/css

import SearchBlack24DpsvgIcon from "./icons/PlasmicIcon__SearchBlack24Dpsvg"; // plasmic-import: C2oaTY0g2i/icon

export type PlasmicOrgs__VariantMembers = {};

export type PlasmicOrgs__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrgs__VariantsArgs;
export const PlasmicOrgs__VariantProps = new Array<VariantPropType>();

export type PlasmicOrgs__ArgsType = {
  orgs?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOrgs__ArgsType;
export const PlasmicOrgs__ArgProps = new Array<ArgPropType>("orgs");

export type PlasmicOrgs__OverridesType = {
  root?: p.Flex<"div">;
  page?: p.Flex<typeof Page>;
  searchBox?: p.Flex<"div">;
  searchInput?: p.Flex<"input">;
  svg?: p.Flex<"svg">;
  orgs?: p.Flex<"div">;
};

export interface DefaultOrgsProps {
  orgs?: React.ReactNode;
  className?: string;
}

function PlasmicOrgs__RenderFunc(props: {
  variants: PlasmicOrgs__VariantsArgs;
  args: PlasmicOrgs__ArgsType;
  overrides: PlasmicOrgs__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <__PlatformHead>
        <title key="title">{""}</title>
      </__PlatformHead>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Page
            data-plasmic-name={"page"}
            data-plasmic-override={overrides.page}
            className={classNames("__wab_instance", sty.page)}
            container={
              <React.Fragment>
                <div className={classNames(defaultcss.all, sty.box___41A8P)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___1Xgp3
                    )}
                  >
                    {"団体検索"}
                  </div>

                  <div
                    data-plasmic-name={"searchBox"}
                    data-plasmic-override={overrides.searchBox}
                    className={classNames(defaultcss.all, sty.searchBox)}
                  >
                    <input
                      data-plasmic-name={"searchInput"}
                      data-plasmic-override={overrides.searchInput}
                      className={classNames(defaultcss.input, sty.searchInput)}
                      placeholder={"検索キーワードを入力…" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />

                    <div className={classNames(defaultcss.all, sty.box__raF0P)}>
                      <SearchBlack24DpsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(defaultcss.all, sty.svg)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>

                <div
                  data-plasmic-name={"orgs"}
                  data-plasmic-override={overrides.orgs}
                  className={classNames(defaultcss.all, sty.orgs)}
                >
                  <div className={classNames(defaultcss.all, sty.box__mxtRq)}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__jOdXl
                      )}
                    >
                      {"検索結果"}
                    </div>

                    <div className={classNames(defaultcss.all, sty.box__saii2)}>
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box___8Suts
                        )}
                      >
                        {"4件"}
                      </div>
                    </div>
                  </div>

                  <div className={classNames(defaultcss.all, sty.box__dzb5F)}>
                    <p.PlasmicSlot
                      defaultContents={
                        <React.Fragment>
                          <OrgCard
                            category={"体育系・一般学生団体"}
                            className={classNames(
                              "__wab_instance",
                              sty.orgCard__uw1Nc
                            )}
                            name={"橋本環奈同好会"}
                          />

                          <OrgCard
                            category={"体育系・一般学生団体"}
                            className={classNames(
                              "__wab_instance",
                              sty.orgCard___0G7Mm
                            )}
                            description={"アクセスするたび変わります"}
                            name={"女装同好会"}
                          />

                          <OrgCard
                            category={"体育系・一般学生団体"}
                            className={classNames(
                              "__wab_instance",
                              sty.orgCard__kG7BQ
                            )}
                            description={"ランダムに変わります"}
                            name={"橋本環奈同好会"}
                          />

                          <OrgCard
                            category={"体育系・一般学生団体"}
                            className={classNames(
                              "__wab_instance",
                              sty.orgCard__v5JYk
                            )}
                            description={
                              "ランダムに選ぶ機能はWordPressの機能を使いたいところですが"
                            }
                            name={"橋本環奈同好会"}
                          />

                          <OrgCard
                            category={"体育系・一般学生団体"}
                            className={classNames(
                              "__wab_instance",
                              sty.orgCard__pCwz9
                            )}
                            description={
                              "おそらくフロントエンドでシャッフルしないといけない"
                            }
                            name={"橋本環奈同好会"}
                          />

                          <OrgCard
                            category={"体育系・一般学生団体"}
                            className={classNames(
                              "__wab_instance",
                              sty.orgCard___8WgBq
                            )}
                            name={"橋本環奈同好会"}
                          />

                          <OrgCard
                            category={"体育系・一般学生団体"}
                            className={classNames(
                              "__wab_instance",
                              sty.orgCard__af4Ij
                            )}
                            name={"橋本環奈同好会"}
                          />

                          <OrgCard
                            className={classNames(
                              "__wab_instance",
                              sty.orgCard__nsBjC
                            )}
                          />
                        </React.Fragment>
                      }
                      value={args.orgs}
                    />
                  </div>
                </div>
              </React.Fragment>
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "page", "searchBox", "searchInput", "svg", "orgs"],
  page: ["page", "searchBox", "searchInput", "svg", "orgs"],
  searchBox: ["searchBox", "searchInput", "svg"],
  searchInput: ["searchInput"],
  svg: ["svg"],
  orgs: ["orgs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  page: typeof Page;
  searchBox: "div";
  searchInput: "input";
  svg: "svg";
  orgs: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrgs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicOrgs__VariantsArgs;
  args?: PlasmicOrgs__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicOrgs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicOrgs__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOrgs__ArgProps,
      internalVariantPropNames: PlasmicOrgs__VariantProps
    });

    return PlasmicOrgs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOrgs";
  } else {
    func.displayName = `PlasmicOrgs.${nodeName}`;
  }
  return func;
}

export const PlasmicOrgs = Object.assign(
  // Top-level PlasmicOrgs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    page: makeNodeComponent("page"),
    searchBox: makeNodeComponent("searchBox"),
    searchInput: makeNodeComponent("searchInput"),
    svg: makeNodeComponent("svg"),
    orgs: makeNodeComponent("orgs"),

    // Metadata about props expected for PlasmicOrgs
    internalVariantProps: PlasmicOrgs__VariantProps,
    internalArgProps: PlasmicOrgs__ArgProps
  }
);

export default PlasmicOrgs;
/* prettier-ignore-end */

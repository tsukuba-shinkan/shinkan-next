// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: hH2h_5Dtgs
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import * as sty from "./PlasmicOrgCard.module.css"; // plasmic-import: hH2h_5Dtgs/css

export type PlasmicOrgCard__VariantMembers = {
  activity: "sports" | "art" | "culture" | "other";
  orgType: "ippan" | "kagai" | "other";
  list: "list";
};

export type PlasmicOrgCard__VariantsArgs = {
  activity?: SingleChoiceArg<"sports" | "art" | "culture" | "other">;
  orgType?: SingleChoiceArg<"ippan" | "kagai" | "other">;
  list?: SingleBooleanChoiceArg<"list">;
};

type VariantPropType = keyof PlasmicOrgCard__VariantsArgs;
export const PlasmicOrgCard__VariantProps = new Array<VariantPropType>(
  "activity",
  "orgType",
  "list"
);

export type PlasmicOrgCard__ArgsType = {
  name?: React.ReactNode;
  description?: React.ReactNode;
  children?: React.ReactNode;
  src?: string;
  to?: string | PageHref;
};

type ArgPropType = keyof PlasmicOrgCard__ArgsType;
export const PlasmicOrgCard__ArgProps = new Array<ArgPropType>(
  "name",
  "description",
  "children",
  "src",
  "to"
);

export type PlasmicOrgCard__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultOrgCardProps {
  name?: React.ReactNode;
  description?: React.ReactNode;
  children?: React.ReactNode;
  src?: string;
  to?: string | PageHref;
  activity?: SingleChoiceArg<"sports" | "art" | "culture" | "other">;
  orgType?: SingleChoiceArg<"ippan" | "kagai" | "other">;
  list?: SingleBooleanChoiceArg<"list">;
  className?: string;
}

function PlasmicOrgCard__RenderFunc(props: {
  variants: PlasmicOrgCard__VariantsArgs;
  args: PlasmicOrgCard__ArgsType;
  overrides: PlasmicOrgCard__OverridesType;
  dataFetches?: PlasmicOrgCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__activity_art]: hasVariant(variants, "activity", "art"),
        [sty.root__activity_culture]: hasVariant(
          variants,
          "activity",
          "culture"
        ),
        [sty.root__activity_other]: hasVariant(variants, "activity", "other"),
        [sty.root__activity_sports]: hasVariant(variants, "activity", "sports"),
        [sty.root__list]: hasVariant(variants, "list", "list")
      })}
      component={Link}
      href={args.to}
      platform={"nextjs"}
    >
      <div
        className={classNames(defaultcss.all, sty.box__oxQw3, {
          [sty.box__list__oxQw3WiGv6]: hasVariant(variants, "list", "list")
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.box__egDkZ, {
            [sty.box__list__egDkZwiGv6]: hasVariant(variants, "list", "list")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(defaultcss.all, sty.box___7AuY)} />
            ),

            value: args.children
          })}
        </div>

        <div
          className={classNames(defaultcss.all, sty.box___6WKxl, {
            [sty.box__activity_art___6WKxlLhErp]: hasVariant(
              variants,
              "activity",
              "art"
            ),
            [sty.box__activity_culture___6WKxllHrU6]: hasVariant(
              variants,
              "activity",
              "culture"
            ),
            [sty.box__activity_other___6WKxlpqEoh]: hasVariant(
              variants,
              "activity",
              "other"
            ),
            [sty.box__activity_sports___6WKxl6TPp1]: hasVariant(
              variants,
              "activity",
              "sports"
            ),
            [sty.box__list___6WKxlwiGv6]: hasVariant(variants, "list", "list")
          })}
        >
          <div
            className={classNames(defaultcss.all, sty.box___8In5T, {
              [sty.box__activity_culture___8In5TlHrU6]: hasVariant(
                variants,
                "activity",
                "culture"
              ),
              [sty.box__list___8In5TwiGv6]: hasVariant(variants, "list", "list")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: hasVariant(variants, "list", "list")
                ? "文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさ文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいうんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう文字がたくさんはいう"
                : "文字",
              value: args.description,
              className: classNames(sty.slotDescription, {
                [sty.slotDescription__list]: hasVariant(
                  variants,
                  "list",
                  "list"
                )
              })
            })}
          </div>

          <div
            className={classNames(defaultcss.all, sty.box__jSjep, {
              [sty.box__activity_other__jSjeppqEoh]: hasVariant(
                variants,
                "activity",
                "other"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "橋本環奈同好会",
              value: args.name,
              className: classNames(sty.slotName, {
                [sty.slotName__list]: hasVariant(variants, "list", "list")
              })
            })}
          </div>

          <div
            className={classNames(defaultcss.all, sty.box__ekacc, {
              [sty.box__activity_art__ekaccLhErp]: hasVariant(
                variants,
                "activity",
                "art"
              ),
              [sty.box__activity_sports__ekacc6TPp1]: hasVariant(
                variants,
                "activity",
                "sports"
              ),
              [sty.box__list__ekaccwiGv6]: hasVariant(variants, "list", "list")
            })}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__k4V,
                {
                  [sty.box__activity_art__k4VLhErp]: hasVariant(
                    variants,
                    "activity",
                    "art"
                  ),
                  [sty.box__activity_culture__k4VLHrU6]: hasVariant(
                    variants,
                    "activity",
                    "culture"
                  ),
                  [sty.box__activity_other__k4VPqEoh]: hasVariant(
                    variants,
                    "activity",
                    "other"
                  ),
                  [sty.box__activity_sports__k4V6TPp1]: hasVariant(
                    variants,
                    "activity",
                    "sports"
                  )
                }
              )}
            >
              {hasVariant(variants, "activity", "other")
                ? "その他"
                : hasVariant(variants, "activity", "culture")
                ? "文化系"
                : hasVariant(variants, "activity", "art")
                ? "芸術系"
                : hasVariant(variants, "activity", "sports")
                ? "体育系"
                : "なんとか系"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__e1DR
              )}
            >
              {"・"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___1OPd2,
                {
                  [sty.box__activity_art___1OPd2LhErp]: hasVariant(
                    variants,
                    "activity",
                    "art"
                  ),
                  [sty.box__activity_culture___1OPd2LHrU6]: hasVariant(
                    variants,
                    "activity",
                    "culture"
                  ),
                  [sty.box__activity_sports___1OPd26TPp1]: hasVariant(
                    variants,
                    "activity",
                    "sports"
                  ),
                  [sty.box__list___1OPd2WiGv6]: hasVariant(
                    variants,
                    "list",
                    "list"
                  ),
                  [sty.box__orgType_ippan___1OPd2FytRu]: hasVariant(
                    variants,
                    "orgType",
                    "ippan"
                  ),
                  [sty.box__orgType_kagai___1OPd2Efjyw]: hasVariant(
                    variants,
                    "orgType",
                    "kagai"
                  ),
                  [sty.box__orgType_other___1OPd2Cn0BT]: hasVariant(
                    variants,
                    "orgType",
                    "other"
                  )
                }
              )}
            >
              {hasVariant(variants, "orgType", "other")
                ? "その他"
                : hasVariant(variants, "orgType", "kagai")
                ? "課外活動団体"
                : hasVariant(variants, "orgType", "ippan")
                ? "一般学生団体"
                : "なんとか学生団体"}
            </div>
          </div>
        </div>
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrgCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrgCard__VariantsArgs;
    args?: PlasmicOrgCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicOrgCard__Fetches;
  } & Omit<PlasmicOrgCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOrgCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOrgCard__ArgProps,
      internalVariantPropNames: PlasmicOrgCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicOrgCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOrgCard";
  } else {
    func.displayName = `PlasmicOrgCard.${nodeName}`;
  }
  return func;
}

export const PlasmicOrgCard = Object.assign(
  // Top-level PlasmicOrgCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicOrgCard
    internalVariantProps: PlasmicOrgCard__VariantProps,
    internalArgProps: PlasmicOrgCard__ArgProps
  }
);

export default PlasmicOrgCard;
/* prettier-ignore-end */

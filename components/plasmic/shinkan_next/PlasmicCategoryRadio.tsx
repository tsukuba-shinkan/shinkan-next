// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: s14nWegQm7
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import sty from "./PlasmicCategoryRadio.module.css"; // plasmic-import: s14nWegQm7/css

export type PlasmicCategoryRadio__VariantMembers = {
  unselected: "all" | "sports" | "art" | "culture" | "other";
  selected: "all" | "sports" | "art" | "culture" | "other";
};

export type PlasmicCategoryRadio__VariantsArgs = {
  unselected?: SingleChoiceArg<"all" | "sports" | "art" | "culture" | "other">;
  selected?: SingleChoiceArg<"all" | "sports" | "art" | "culture" | "other">;
};

type VariantPropType = keyof PlasmicCategoryRadio__VariantsArgs;
export const PlasmicCategoryRadio__VariantProps = new Array<VariantPropType>(
  "unselected",
  "selected"
);

export type PlasmicCategoryRadio__ArgsType = {};
type ArgPropType = keyof PlasmicCategoryRadio__ArgsType;
export const PlasmicCategoryRadio__ArgProps = new Array<ArgPropType>();

export type PlasmicCategoryRadio__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  text?: p.Flex<"div">;
};

export interface DefaultCategoryRadioProps {
  unselected?: SingleChoiceArg<"all" | "sports" | "art" | "culture" | "other">;
  selected?: SingleChoiceArg<"all" | "sports" | "art" | "culture" | "other">;
  className?: string;
}

function PlasmicCategoryRadio__RenderFunc(props: {
  variants: PlasmicCategoryRadio__VariantsArgs;
  args: PlasmicCategoryRadio__ArgsType;
  overrides: PlasmicCategoryRadio__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootselected_all]: hasVariant(variants, "selected", "all"),
          [sty.rootselected_art]: hasVariant(variants, "selected", "art"),
          [sty.rootselected_culture]: hasVariant(
            variants,
            "selected",
            "culture"
          ),
          [sty.rootselected_other]: hasVariant(variants, "selected", "other"),
          [sty.rootselected_sports]: hasVariant(variants, "selected", "sports"),
          [sty.rootunselected_all]: hasVariant(variants, "unselected", "all"),
          [sty.rootunselected_art]: hasVariant(variants, "unselected", "art"),
          [sty.rootunselected_culture]: hasVariant(
            variants,
            "unselected",
            "culture"
          ),
          [sty.rootunselected_other]: hasVariant(
            variants,
            "unselected",
            "other"
          ),
          [sty.rootunselected_sports]: hasVariant(
            variants,
            "unselected",
            "sports"
          )
        }
      )}
      component={Link}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textselected_all]: hasVariant(variants, "selected", "all"),
          [sty.textselected_art]: hasVariant(variants, "selected", "art"),
          [sty.textselected_culture]: hasVariant(
            variants,
            "selected",
            "culture"
          ),
          [sty.textselected_other]: hasVariant(variants, "selected", "other"),
          [sty.textselected_sports]: hasVariant(variants, "selected", "sports"),
          [sty.textunselected_all]: hasVariant(variants, "unselected", "all"),
          [sty.textunselected_art]: hasVariant(variants, "unselected", "art"),
          [sty.textunselected_culture]: hasVariant(
            variants,
            "unselected",
            "culture"
          ),
          [sty.textunselected_other]: hasVariant(
            variants,
            "unselected",
            "other"
          ),
          [sty.textunselected_sports]: hasVariant(
            variants,
            "unselected",
            "sports"
          )
        })}
      >
        {hasVariant(variants, "selected", "culture")
          ? "文化系"
          : hasVariant(variants, "selected", "art")
          ? "芸術系"
          : hasVariant(variants, "selected", "sports")
          ? "体育系"
          : hasVariant(variants, "unselected", "other")
          ? "その他"
          : hasVariant(variants, "unselected", "culture")
          ? "文化系"
          : hasVariant(variants, "unselected", "art")
          ? "芸術系"
          : hasVariant(variants, "unselected", "sports")
          ? "体育系"
          : hasVariant(variants, "selected", "other")
          ? "その他"
          : "全て"}
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategoryRadio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategoryRadio__VariantsArgs;
    args?: PlasmicCategoryRadio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategoryRadio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCategoryRadio__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCategoryRadio__ArgProps,
      internalVariantPropNames: PlasmicCategoryRadio__VariantProps
    });

    return PlasmicCategoryRadio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCategoryRadio";
  } else {
    func.displayName = `PlasmicCategoryRadio.${nodeName}`;
  }
  return func;
}

export const PlasmicCategoryRadio = Object.assign(
  // Top-level PlasmicCategoryRadio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCategoryRadio
    internalVariantProps: PlasmicCategoryRadio__VariantProps,
    internalArgProps: PlasmicCategoryRadio__ArgProps
  }
);

export default PlasmicCategoryRadio;
/* prettier-ignore-end */

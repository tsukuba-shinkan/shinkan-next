// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4oWAtwkSeL4ciDYEekjxG9
// Component: v0V4QrK8UW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shinkan_next.module.css"; // plasmic-import: 4oWAtwkSeL4ciDYEekjxG9/projectcss
import * as sty from "./PlasmicPager.module.css"; // plasmic-import: v0V4QrK8UW/css

import NavigateBeforeBlack18DpsvgIcon from "./icons/PlasmicIcon__NavigateBeforeBlack18Dpsvg"; // plasmic-import: r4LI--POIP/icon
import NavigateNextBlack18DpsvgIcon from "./icons/PlasmicIcon__NavigateNextBlack18Dpsvg"; // plasmic-import: 4ceokTvl9I/icon

export type PlasmicPager__VariantMembers = {
  hasNext: "hasNext";
  hasPrev: "hasPrev";
};

export type PlasmicPager__VariantsArgs = {
  hasNext?: SingleBooleanChoiceArg<"hasNext">;
  hasPrev?: SingleBooleanChoiceArg<"hasPrev">;
};

type VariantPropType = keyof PlasmicPager__VariantsArgs;
export const PlasmicPager__VariantProps = new Array<VariantPropType>(
  "hasNext",
  "hasPrev"
);

export type PlasmicPager__ArgsType = {};
type ArgPropType = keyof PlasmicPager__ArgsType;
export const PlasmicPager__ArgProps = new Array<ArgPropType>();

export type PlasmicPager__OverridesType = {
  root?: p.Flex<"div">;
  prev?: p.Flex<"div">;
  next?: p.Flex<"div">;
};

export interface DefaultPagerProps {
  hasNext?: SingleBooleanChoiceArg<"hasNext">;
  hasPrev?: SingleBooleanChoiceArg<"hasPrev">;
  className?: string;
}

function PlasmicPager__RenderFunc(props: {
  variants: PlasmicPager__VariantsArgs;
  args: PlasmicPager__ArgsType;
  overrides: PlasmicPager__OverridesType;
  dataFetches?: PlasmicPager__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__hasNext]: hasVariant(variants, "hasNext", "hasNext"),
        [sty.root__hasPrev]: hasVariant(variants, "hasPrev", "hasPrev")
      })}
    >
      <div className={classNames(defaultcss.all, sty.box__efUkH)}>
        {(hasVariant(variants, "hasPrev", "hasPrev") ? true : false) ? (
          <div
            data-plasmic-name={"prev"}
            data-plasmic-override={overrides.prev}
            className={classNames(defaultcss.all, sty.prev, {
              [sty.prev__hasPrev]: hasVariant(variants, "hasPrev", "hasPrev")
            })}
          >
            <NavigateBeforeBlack18DpsvgIcon
              className={classNames(defaultcss.all, sty.svg__zgKyb)}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__rx4E
              )}
            >
              {"前のページ"}
            </div>
          </div>
        ) : null}
        {(hasVariant(variants, "hasNext", "hasNext") ? true : false) ? (
          <div
            data-plasmic-name={"next"}
            data-plasmic-override={overrides.next}
            className={classNames(defaultcss.all, sty.next, {
              [sty.next__hasNext]: hasVariant(variants, "hasNext", "hasNext")
            })}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__hlQzX
              )}
            >
              {"次のページ"}
            </div>

            <NavigateNextBlack18DpsvgIcon
              className={classNames(defaultcss.all, sty.svg__miHZ)}
              role={"img"}
            />
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "prev", "next"],
  prev: ["prev"],
  next: ["next"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  prev: "div";
  next: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPager__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPager__VariantsArgs;
    args?: PlasmicPager__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPager__Fetches;
  } & Omit<PlasmicPager__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPager__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPager__ArgProps,
      internalVariantPropNames: PlasmicPager__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPager__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPager";
  } else {
    func.displayName = `PlasmicPager.${nodeName}`;
  }
  return func;
}

export const PlasmicPager = Object.assign(
  // Top-level PlasmicPager renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    prev: makeNodeComponent("prev"),
    next: makeNodeComponent("next"),

    // Metadata about props expected for PlasmicPager
    internalVariantProps: PlasmicPager__VariantProps,
    internalArgProps: PlasmicPager__ArgProps
  }
);

export default PlasmicPager;
/* prettier-ignore-end */
